JIRA :
https://chaosproject.atlassian.net/jira/core/projects/CHAOS/board?groupBy=status

Questions :
- A quoi sert le Idle Quit (par rapport à Empty Quit) - DispatchQ:threadFunc()
- Ordre de précision de LzServices::Chrono_MSecs()
- Quasi derniere ligne mutex commented
- si un job lance une exception, qu'est ce qu'on fais ? (arret de tout ou on continue).
- si un job fins instant on le met dans logs ?
- Est-ce qu'à l'intérieur d'un job , le job peut se mettre en position de wait ?

ToDo:
erreur SF rare : https://stackoverflow.com/questions/70461138/rare-segmentation-fault-during-object-creation-with-new


14/04 
Reprise du projet, présentation le matin et réunion de reprise en début d'après-midi avec l'encadrant. Puis lecture du code.

15/04
Répartition des tâches : Sagar, Jules et Florian sur Logs; Emmanuel et Stevenson sur GUI. 2e réunion avec l'encadrant -> ajout de code.
Décision sur le format du Json.

16/04
Réflexion sur Docker/VENV : Venv au minimum et Docker si possible. Problème de création du Venv sur les différentes machines : besoin de l'installation de paquets Python.
Modification de threadFunc pour ajouter la list de logs. Prochaine étape : clean le code et modifier le makefile pour la compilation.
Apprentissage de pyQT pour Manu et Steve.

17/04
Résolution de bugs de compilation, on arrive à compiler les programmes mais problème pour test 3 coredump : ça dispatch 3 fois puis soulève une exception non-traitée par un what() quelque part (std::system_error).
Implémentation de getLogEntries() pour documenter et débugger l'execution. Ajout de LzLogM dans les dispatch et dans threadfund (cas 0). Steve en full learning pyQT.œ

18/04
Rajout des waiting dans dans les fichier json. Avancé sur l'interface graphique.

22/04
API : contours jobs pour meilleur visu (pour le surlignage changer couleurs en plus clair pour accentuer), 
need visualiser mutex. Prendre couleurs Twinsight, bouton pour naviguer début/fin. Concaténer les temps.
2 erreurs segfault cosmiques impossible à reproduire. (une fois sur des millier) -> Ajouter un catch qui relance le program en cas de rare SF ?
A faire dans le ReadMe.txt : user doit export les logs si il les veux avant de restartPool(nb)
->Fin de journée API : couleur fait, job contours fait reste non utile


23/04
En API : besoin de : garder la même couleur après avoir survoler une rectangle avec le curseur.
Session explication de code avec le prof, il nous a passé ses fichiers pour qu'on test.
Galère l'après-midi pour résoudre des problèmes de fluidité de la dispatchQ + blocages récurrents.
Résolu en fin de journée.
Améliorations graphiques de l'API pour la visibilité (plein de petites merdes d'après @EmmanuelRenevier)
Todo : Récuperer la gestion du mutex et l'afficher sur l'API

24/04
Gestion le matin de l'attribution du Mutex et sur ses états.
Changer le using namespace de Job/NamedJob en une classe Jobs afin de pouvoir attribuer des identifiants et récuperer l'arboressence d'heredité des jobs.
Pas mal de correction à faire.

25/04
Logs : implémentation de la map pour obtenir l'arborescence des jobs. Gros problème de SF qui nous a occupé tout l'apreès-midi : 
solution actuelle = double check du join des threads dans le destructeur.
GUI : implémentation du slider + debut de l'affichage des infos au temps t donnée 
A faire : ajouter les nouvelles inforamtions données par le groupe des logs à l'aide du nouveau json + show les bonnes infos


05/05
Ne pas utiliser Quitting pour les noms de Jobs
On implemente la fonction balises pour baliser mdrr
Utiliser des noms unique pour les tag et pour les mutex(pour les differentes phase d'un meme mutex garder exactement le meme nom)


20/05
rajouter rectanglealtime log update tous les x ms
Liste de tests unit :
    - 10 jobs Ok et 10 KO (jobs instant)
    - Test tag dans un tag
    - Mutex dans un mutex
    - Job non finis (avec mustex non finis et tag) + finis
    - Dealock (ameliroer)
    - des quitting + restartPool (unit test 2)
    - test avec un bug et la GUI doit trouver le pb

Penser à rajouter dans la doc à interdir les nom vide aux Mutex



21/05
ideeeee : dans finish si on veux restart alors pas besoin de join, il faut juste clear les jobs et reenvoyer les thread dans threadfunc et si on veux pas restart alors la on join.
